<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCForge</name>
    </assembly>
    <members>
        <member name="M:MCForge.World.Block.Add(MCForge.World.Block)">
            <summary>
            Add your custom block to the list
            </summary>
            <param name="b">Block to add</param>
        </member>
        <member name="M:MCForge.World.Block.NameToBlock(System.String)">
            <summary>
            Get a byte based on the name of the block
            </summary>
            <param name="name">The name of the block</param>
            <returns>A byte of the block</returns>
        </member>
        <member name="M:MCForge.World.Block.ValidBlockName(System.String)">
            <summary>
            Check to see if a block from the specified name exists.
            </summary>
            <param name="name">Name of the block to check</param>
            <returns>If the block exists</returns>
        </member>
        <member name="M:MCForge.World.Block.op_Implicit(MCForge.World.Block)~System.Byte">
            <summary>
            Converts a Block to a byte
            </summary>
        </member>
        <member name="M:MCForge.World.Block.op_Implicit(System.Byte)~MCForge.World.Block">
            <summary>
            Converts a byte to a Block
            </summary>
        </member>
        <member name="M:MCForge.World.Block.IsValidBlock(System.Byte)">
            <summary>
            Checks to see if a block is valid (MCProtocol)
            </summary>
            <param name="blockToCheck">Byte or block to check its validness</param>
            <returns>A boolean stating whether its valid</returns>
        </member>
        <member name="T:MCForge.World.Block.BlockList">
            <summary>
            List of blocks (in the form of a byte)
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.AIR">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.STONE">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.GRASS">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.DIRT">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.COBBLESTONE">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.WOOD_PLANK">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.SAPLING">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.BEDROCK">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.ACTIVE_WATER">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.WATER">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.ACTIVE_LAVA">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="F:MCForge.World.Block.BlockList.LAVA">
            <summary>
            Air Block
            </summary>
        </member>
        <member name="T:MCForge.SQL.Database">
            <summary>
            Description of Database.
            </summary>
        </member>
        <member name="M:MCForge.SQL.Database.QueueCommand(System.String)">
            <summary>
            Add a sql command to the queue
            </summary>
            <param name="cmd">The command to add</param>
        </member>
        <member name="M:MCForge.SQL.Database.QueueCommands(System.String[])">
            <summary>
            Add multiple commands to the queue
            </summary>
            <param name="cmds">The array of commands to add</param>
        </member>
        <member name="M:MCForge.SQL.Database.Flush">
            <summary>
            Flush all the commands
            This will execute all the commands in the queue and remove them
            </summary>
        </member>
        <member name="M:MCForge.SQL.Database.Dispose">
            <summary>
            Close the SQL connection and dispose resources
            THIS SHOULD ONLY BE CALLED ONCE
            </summary>
        </member>
        <member name="M:MCForge.SQL.Database.executeQuery(System.String)">
            <summary>
            Execute a command to the sql server
            This wont return any data
            If the server is set to queue all commands, then the commands will be added to queue
            </summary>
            <param name="queryString">The command to execute</param>
        </member>
        <member name="M:MCForge.SQL.Database.executeQuery(System.String[])">
            <summary>
            Execute multiple commands to the sql server
            This wont return any data
            If the server is set to queue all commands, then the commands will be added to queue
            </summary>
            <param name="commands">The commands to execute</param>
        </member>
        <member name="M:MCForge.SQL.Database.fillData(System.String)">
            <summary>
            Execute a command to the sql server and return a datatable of the result
            </summary>
            <param name="queryString">The command to execute</param>
            <returns>The datatable</returns>
        </member>
        <member name="T:MCForge.API.Events.MoveEvent">
            <summary>
            PlayerMove event class
            </summary>
        </member>
        <member name="T:MCForge.API.Events.Event`2">
            <summary>
            Event class
            </summary>
            <typeparam name="T1">The type of the sender</typeparam>
            <typeparam name="T2">The type of the arguments</typeparam>
        </member>
        <member name="M:MCForge.API.Events.Event`2.Call(`0,`1)">
            <summary>
            Invokes an event
            </summary>
            <param name="sender">The object invoking the event</param>
            <param name="args">The arguments to be passed to the event</param>
            <returns>The arguments</returns>
        </member>
        <member name="M:MCForge.API.Events.Event`2.Call(`0,`1,MCForge.API.Events.Event{`0,`1})">
            <summary>
            Invokes events of two events in priority stages
            </summary>
            <param name="sender">The object invoking the event</param>
            <param name="args">The argument to be passed to the event</param>
            <param name="other">The other event to invoke</param>
            <returns>The arguments</returns>
        </member>
        <member name="E:MCForge.API.Events.Event`2.Low">
            <summary>
            Low events
            </summary>
        </member>
        <member name="E:MCForge.API.Events.Event`2.Normal">
            <summary>
            Normal events
            </summary>
        </member>
        <member name="E:MCForge.API.Events.Event`2.High">
            <summary>
            High events
            </summary>
        </member>
        <member name="E:MCForge.API.Events.Event`2.Important">
            <summary>
            Important events
            </summary>
        </member>
        <member name="E:MCForge.API.Events.Event`2.All">
            <summary>
            Represents all priority levels (for removing only)
            </summary>
        </member>
        <member name="T:MCForge.API.Events.Event`2.EventHandler">
            <summary>
            The delgate type of the events
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:MCForge.API.Events.MoveEventArgs">
            <summary>
            PlayerMoveEventArgs
            </summary>
        </member>
        <member name="T:MCForge.API.Events.EventArgs">
            <summary>
            The EventArgs base class
            </summary>
        </member>
        <member name="F:MCForge.API.Events.EventArgs.Disable">
            <summary>
            Gets or sets whether the event should be disabled for this method, or not.
            </summary>
        </member>
        <member name="M:MCForge.API.Events.EventArgs.Unregister">
            <summary>
            Unregisters the current invoked eventhandler form this event.
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ICancelable.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ICancelable.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ICancelable.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="M:MCForge.API.Events.MoveEventArgs.#ctor(MCForge.Utils.Vector3S,MCForge.Utils.Vector3S)">
            <summary>
            Creates a new instance
            </summary>
            <param name="fromPosition">The position where the move started</param>
        </member>
        <member name="M:MCForge.API.Events.MoveEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.MoveEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.MoveEventArgs.FromPosition">
            <summary>
            The position where the move started
            </summary>
        </member>
        <member name="P:MCForge.API.Events.MoveEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.World.Physics.PhysicsBlock">
            <summary>
            Create a custom block with physics
            </summary>
        </member>
        <member name="F:MCForge.World.Physics.PhysicsBlock.TimerTick">
            <summary>
            The physics time.
            </summary>
        </member>
        <member name="F:MCForge.World.Physics.PhysicsBlock.Blocks">
            <summary>
            A list of blocks
            </summary>
        </member>
        <member name="M:MCForge.World.Physics.PhysicsBlock.Tick">
            <summary>
            The on tick method
            </summary>
        </member>
        <member name="M:MCForge.World.Physics.PhysicsBlock.#ctor(System.Int32,System.Int32,System.Int32,MCForge.World.Level)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.World.Physics.PhysicsBlock"/> class.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="l">The l.</param>
        </member>
        <member name="M:MCForge.World.Physics.PhysicsBlock.Remove">
            <summary>
            Removes this instance.
            </summary>
        </member>
        <member name="M:MCForge.World.Physics.PhysicsBlock.AddBlock(MCForge.World.Physics.PhysicsBlock)">
            <summary>
            Adds the block.
            </summary>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Physics.PhysicsBlock.InIt">
            <summary>
            Initializes physics block class
            </summary>
        </member>
        <member name="P:MCForge.World.Physics.PhysicsBlock.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:MCForge.World.Physics.PhysicsBlock.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="P:MCForge.World.Physics.PhysicsBlock.Z">
            <summary>
            Gets or sets the Z.
            </summary>
            <value>
            The Z.
            </value>
        </member>
        <member name="M:MCForge.Interface.Plugin.Plugin.GetNames">
            <summary>
            Get the names of all plugins
            </summary>
            <returns>The names of all plugins</returns>
        </member>
        <member name="M:MCForge.Interface.Plugin.Plugin.unload(System.String,System.Boolean)">
            <summary>
            Unloads a plugin
            </summary>
            <param name="name">The name of the plugin to unload</param>
            <param name="ignoreCase">Wheter or not to ignore the case. (default true)</param>
            <returns>Wheter or not the plugin is unloaded</returns>
        </member>
        <member name="M:MCForge.Interface.Plugin.Plugin.reload(System.String,System.Boolean)">
            <summary>
            Reload one or all unloaded plugins.
            </summary>
            <param name="name">The name of the plugin to load, or an empty string to load all plugins</param>
            <param name="ignoreCase">Whether the case of the name gets ignored or not</param>
            <returns></returns>
        </member>
        <member name="M:MCForge.Interface.Plugin.Plugin.AddReference(MCForge.Interface.Plugin.IPlugin)">
            <summary>
            Add an array of references to your command here
            </summary>
            <param name="plugin">The plugin d that this reference... references, you should most likely use 'this'</param>    
        </member>
        <member name="M:MCForge.Interface.Plugin.Plugin.getByInterface(System.String)">
            <summary>
            Gets a plugin by interface.
            </summary>
            <param name="name">The name of the interface</param>
            <returns></returns>
        </member>
        <member name="F:MCForge.Interface.Plugin.Plugin.OnPluginLoad">
            <summary>
            Gets called when a plugin gets loaded.
            </summary>
        </member>
        <member name="F:MCForge.Interface.Plugin.Plugin.OnPluginUnload">
            <summary>
            Gets called when a plugin gets unloaded.
            </summary>
        </member>
        <member name="T:MCForge.Utils.MathUtils">
            <summary>
            A class full of static methods to help assist common 3D and 2D math algorithms
            </summary>
        </member>
        <member name="M:MCForge.Utils.MathUtils.AbsVector(MCForge.Utils.Vector3S)">
            <summary>
            Gets a vector where every indices has been Math.Absoluted.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A absoluted Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.AbsVector(MCForge.Utils.Vector3D)">
            <summary>
            Gets a vector where every indices has been Math.Absoluted.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A absoluted Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.AbsVector(MCForge.Utils.Vector2S)">
            <summary>
            Gets a vector where every indices has been Math.Absoluted.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A absoluted Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.AbsVector(MCForge.Utils.Vector2D)">
            <summary>
            Gets a vector where every indices has been Math.Absoluted.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A absoluted Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SinVector(MCForge.Utils.Vector2S)">
            <summary>
            Gets a vector where every indices has been Math.Sined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A sined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SinVector(MCForge.Utils.Vector2D)">
            <summary>
            Gets a vector where every indices has been Math.Sined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A sined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SinVector(MCForge.Utils.Vector3D)">
            <summary>
            Gets a vector where every indices has been Math.Sined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A sined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SinVector(MCForge.Utils.Vector3S)">
            <summary>
            Gets a vector where every indices has been Math.Sined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A sined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.CosVector(MCForge.Utils.Vector2S)">
            <summary>
            Gets a vector where every indices has been Math.Cosined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A cosined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.CosVector(MCForge.Utils.Vector2D)">
            <summary>
            Gets a vector where every indices has been Math.Cosined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A cosined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.CosVector(MCForge.Utils.Vector3D)">
            <summary>
            Gets a vector where every indices has been Math.Cosined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A cosined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.CosVector(MCForge.Utils.Vector3S)">
            <summary>
            Gets a vector where every indices has been Math.Cosined.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A cosined Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.TanVector(MCForge.Utils.Vector2S)">
            <summary>
            Gets a vector where every indices has been Math.Tangented.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A tangified Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.TanVector(MCForge.Utils.Vector2D)">
            <summary>
            Gets a vector where every indices has been Math.Tangented.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A tangified Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.TanVector(MCForge.Utils.Vector3D)">
            <summary>
            Gets a vector where every indices has been Math.Tangented.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A tangified Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.TanVector(MCForge.Utils.Vector3S)">
            <summary>
            Gets a vector where every indices has been Math.Tangented.
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A tangified Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SignVector(MCForge.Utils.Vector2S)">
            <summary>
            Gets a vector where every indices has been signed
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A signed Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SignVector(MCForge.Utils.Vector2D)">
            <summary>
            Gets a vector where every indices has been signed
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A signed Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SignVector(MCForge.Utils.Vector3D)">
            <summary>
            Gets a vector where every indices has been signed
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A signed Vector</returns>
        </member>
        <member name="M:MCForge.Utils.MathUtils.SignVector(MCForge.Utils.Vector3S)">
            <summary>
            Gets a vector where every indices has been signed
            </summary>
            <param name="Vector">The vector.</param>
            <returns>A signed Vector</returns>
        </member>
        <member name="M:MCForge.Utils.ColorUtils.ToColor(System.ConsoleColor)">
            <summary>
            Convert a console color to an ARGB color
            </summary>
            <param name="color">Console color to convert</param>
            <returns>A color</returns>
        </member>
        <member name="M:MCForge.Utils.ColorUtils.ToConsoleColor(System.Drawing.Color)">
            <summary>
            Convert an ARGB color to a Win32 ConsoleColor
            </summary>
            <param name="color">Color to convert</param>
            <remarks>If no ConsoleColor is found to convert, ConsoleColor.Black will be returned</remarks>
            <returns>A converted ConsoleColor</returns>
        </member>
        <member name="P:MCForge.Utils.ColorUtils.DarkYellow">
            <summary>
            A color representing hex value CC 77 22
            </summary>
        </member>
        <member name="T:MCForge.Interface.Command.Command">
            <summary>
            The command class, used to store commands for players to use
            </summary>
        </member>
        <member name="M:MCForge.Interface.Command.Command.AddReference(MCForge.Interface.Command.ICommand,System.String[])">
            <summary>
            Add an array of referances to your command here
            </summary>
            <param name="command">the command that this referance... referances, you should most likely use 'this'</param>
            <param name="reference">the array of strings you want players to type to use your command</param>
        </member>
        <member name="M:MCForge.Interface.Command.Command.AddReference(MCForge.Interface.Command.ICommand,System.String)">
            <summary>
            Add a referance to your command here
            </summary>
            <param name="command">the command that this referance... referances, you should most likely use 'this'</param>
            <param name="reference">the string you want player to type to use your command, you can use this method more than once :)</param>
        </member>
        <member name="F:MCForge.Interface.Command.Command.OnCommandLoad">
            <summary>
            Gets called when a command gets loaded.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.Command.all">
            <summary>
            Returns the dictionary of all commands.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.Command.OnCommandUnload">
            <summary>
            Gets called when a command gets unloaded.
            </summary>
        </member>
        <member name="F:MCForge.Interface.Command.CommandTypes.Building">
            <summary>
            Build type of command
            </summary>
        </member>
        <member name="F:MCForge.Interface.Command.CommandTypes.Mod">
            <summary>
            Mod type of command
            </summary>
        </member>
        <member name="F:MCForge.Interface.Command.CommandTypes.Misc">
            <summary>
            Misc type of command
            </summary>
        </member>
        <member name="F:MCForge.Interface.Command.CommandTypes.Information">
            <summary>
            Info type of command
            </summary>
        </member>
        <member name="T:MCForge.Entity.Player">
            <summary>
            The player class, this contains all player information.
            </summary>
        </member>
        <member name="T:MCForge.Entity.Sender">
            <summary>
            The Sender can be anything from the player to the console
            </summary>
        </member>
        <member name="M:MCForge.Entity.Sender.SendMessage(System.String)">
            <summary>
            Send this sender a message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SendBlockChange(System.UInt16,System.UInt16,System.UInt16,System.Byte)">
            <summary>
            This send a blockchange to the player only. (Not other players)
            </summary>
            <param name="x">The position the block will be placed in (x)</param> 
            <param name="z"> The position the block will be placed in (z)</param>
            <param name="y"> The position the block will be placed in (y)</param>
            <param name="type"> The type of block that will be placed.</param>
        </member>
        <member name="M:MCForge.Entity.Player.SendThisPlayerTheirOwnPos">
            <summary>
            Exactly what the function name is, it might be useful to change this players pos first ;)
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.Kick(System.String)">
            <summary>
            Kick this player with the specified message, the message broadcasts across the server
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SKick(System.String)">
            <summary>
            Kick this player with a specified message, this message will only get sent to op's
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SendToPos(MCForge.Utils.Vector3S,System.Byte[])">
            <summary>
            Sends the specified player to the specified coordinates.
            </summary>
            <param name="_pos"></param>Vector3 coordinate to send to.
            <param name="_rot"></param>Rot to send to.
        </member>
        <member name="M:MCForge.Entity.Player.SpawnThisPlayerToOtherPlayers">
            <summary>
            Spawns this player to all other players in the server.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.SpawnOtherPlayersForThisPlayer">
            <summary>
            Spawns all other players of the server to this player.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.SpawnBotsForThisPlayer">
            <summary>
            Spawns all bots to this player
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.GlobalDie">
            <summary>
            Kill this player for everyone.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.UniversalChat(System.String)">
            <summary>
            Send a message to everyone, on every world
            </summary>
            <param name="text">The message to send.</param>
        </member>
        <member name="M:MCForge.Entity.Player.UniversalChatOps(System.String)">
            <summary>
            Sends a message to all operators+
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.UniversalChatAdmins(System.String)">
            <summary>
            Sends a message to all admins+
            </summary>
            <param name="message">The message to be sent</param>
        </member>
        <member name="M:MCForge.Entity.Player.RankChat(MCForge.Entity.Player,System.String)">
            <summary>
            Sends a message to all of the players with the same rank
            </summary>
            <param name="from">The player sending the message</param>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.LevelChat(MCForge.Entity.Player,System.String)">
            <summary>
            Sends a message to all of the players on the specified level
            </summary>
            <param name="from">The player sending the message</param>
            <param name="message">The message to be sent</param>
        </member>
        <member name="F:MCForge.Entity.Player.UID">
            <summary>
            This is the UID for the player in the database
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.Ip">
            <summary>
            This is the player's IP Address
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player._storedMessage">
            <summary>
            The player's stored message (For appending)
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.Pos">
            <summary>
            The players current position
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.oldPos">
            <summary>
            The players last known position
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.LastClick">
            <summary>
            The players last known click
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.replacement">
            <summary>
            Holds replacement messages for profan filter
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.ExtraData">
            <summary>
            Dictionary for housing extra data, great for giving player objects to pass
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.Group">
            <summary>
            The current Group of the player
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.SendMessage(System.String)">
            <summary>
            Send this player a message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.LoadAllExtra">
            <summary>
            Load all the players extra data from the database
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.LoadExtra">
            <summary>
            Load the players extra data from the database
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.IsInTable(System.Object)">
            <summary>
            Check to see if the key is in the table already
            </summary>
            <param name="key">The key to check</param>
            <returns>If true, then they key is in the table and doesnt need to be added, if false, then the key needs to be added</returns>
        </member>
        <member name="M:MCForge.Entity.Player.CatchNextBlockchange(MCForge.Entity.Player.BlockChangeDelegate,System.Object)">
            <summary>
            This void catches the new blockchange a player does.
            </summary>
            <param name="change">The BlockChangeDelegate that will be executed on blockchange.</param>
            <param name="data">A passback object that can be used for a command to send data back to itself for use</param>
        </member>
        <member name="M:MCForge.Entity.Player.Click(System.UInt16,System.UInt16,System.UInt16,System.Byte)">
            <summary>
            Fakes a click by invoking a blockchange event.
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <param name="y"></param>
            <param name="type"></param>
        </member>
        <member name="M:MCForge.Entity.Player.Rainbow(System.String)">
            <summary>
            Rainbows some text
            </summary>
            <param name="strin">The string input</param>
            <returns>Outputs some colorful RAIIIIIINBBBBBBOWWWWWWW text</returns>
        </member>
        <member name="M:MCForge.Entity.Player.ValidName(System.String)">
            <summary>
            Check to see is a given name is valid
            </summary>
            <param name="name">the name to check</param>
            <returns>returns true if name is valid</returns>
        </member>
        <member name="M:MCForge.Entity.Player.Find(System.String)">
            <summary>
            Attempts to find the player in the list of online players
            </summary>
            <param name="name">The player name to find</param>
            <remarks>Can be a partial name</remarks>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerChat">
            <summary>
            Gets called when this player sends a message.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersChat">
            <summary>
            Gets called when any player sends a message.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerCommand">
            <summary>
            Gets called when this player tries to run a command.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersCommand">
            <summary>
            Gets called when any player tries to run a command.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerConnect">
            <summary>
            Gets called when this player connects.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersConnect">
            <summary>
            Gets called when any player connects.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerDisconnect">
            <summary>
            Gets called when this player disconnect.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersDisconnect">
            <summary>
            Gets called when any player disconnect.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerMove">
            <summary>
            Gets called when this player moves.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersMove">
            <summary>
            Gets called when any player moves.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerBlockChange">
            <summary>
            Gets called when this player changes a block.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersBlockChange">
            <summary>
            Gets called when any player changes a block.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnCommandEnd">
            <summary>
            Gets called when the command this player called has just ended.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllCommandEnd">
            <summary>
            Gets called when a command a player called has just ended.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerReceivePacket">
            <summary>
            Gets called when this player receives a packet.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersReceivePacket">
            <summary>
            Gets called when any player receives a packet.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerReceiveUnknownPacket">
            <summary>
            Gets called when the player receives a packet.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersReceiveUnknownPacket">
            <summary>
            Gets called when any player receives a packet.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnPlayerSendPacket">
            <summary>
            Gets called when a packet is sent to a player.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.DataSaved">
            <summary>
            Gets called when data is saved to the database
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.OnAllPlayersSendPacket">
            <summary>
            Gets called when a packet is sent to any player.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.GetDatapass(System.String)">
            <summary>
            Gets a datapass object and removes it from the list.
            </summary>
            <param name="key">The key to access the datapass object.</param>
            <returns>A datapass object.</returns>
        </member>
        <member name="M:MCForge.Entity.Player.SetDatapass(System.String,System.Object)">
            <summary>
            Sets a datapass object according to the key.
            </summary>
            <param name="key">The key to set the datapass object to.</param>
            <param name="data">The datapass object.</param>
        </member>
        <member name="P:MCForge.Entity.Player.IsOwner">
            <summary>
            Checks if the player is the server owner.
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.Username">
            <summary>
            This is the player's username
            </summary>       
        </member>
        <member name="P:MCForge.Entity.Player.IsLoading">
            <summary>
            True if the player is currently loading a map
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsLoggedIn">
            <summary>
            True if the player has completed the login process
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsBeingKicked">
            <summary>
            Get or set if the player is currently being kicked
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.Level">
            <summary>
            This is the players current level
            When the value of the level is changed, the user is sent the new map.
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.id">
            <summary>
            The players MC Id, this changes each time the player logs in
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.Rot">
            <summary>
            The players current rotation
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.oldRot">
            <summary>
            The players last known rotation
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsHidden">
            <summary>
            Get or set if the player is hidden from other players
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsAdmin">
            <summary>
            True if this player is an admin
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsVerified">
            <summary>
            Get or set if the player is verified in the AdminPen
            </summary>
        </member>
        <member name="P:MCForge.Entity.Player.IsHeadFlipped">
            <summary>
            Flips players head if set to true
            </summary>
        </member>
        <member name="T:MCForge.Entity.Player.BlockChangeDelegate">
            <summary>
            This delegate is used for when a command wants to be activated the first time a player places a block
            </summary>
            <param name="p">This is a player object</param>
            <param name="x">The position of the block that was changed (x)</param>
            <param name="z">The position of the block that was changed (z)</param>
            <param name="y">The position of the block that was changed (y)</param>
            <param name="newType">The type of block the user places (air if user is deleting)</param>
            <param name="placing">True if the player is placing a block</param>
            <param name="PassBack">A passback object that can be used for a command to send data back to itself for use</param>
        </member>
        <member name="T:MCForge.Entity.Player.NextChatDelegate">
            <summary>
            This delegate is used for when a command wants to be activated the next time the player sends a message.
            </summary>
            <param name="p">The player object</param>
            <param name="message">The string the player sent</param>
            <param name="PassBack">A passback object that can be used for a command to send data back to itself for use</param>
        </member>
        <member name="M:MCForge.Core.PDB.CompareTo(MCForge.Core.PDB)">
            <summary>
            This allows a PDB to be compared to another PDB by looking at the username, and subsequently, it can then be sorted.
            </summary>
            <param name="pdb">The comparing PDB</param>
            <returns>returns a comparison of the usernames</returns>
        </member>
        <member name="T:MCForge.Utils.MiscUtils">
            <summary>
            Misc utils and extentions.
            </summary>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.GetIfExist``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets the object if it exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dict.</param>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.CreateIfNotExist``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Puts object in list if it does not exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dict.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.ListToString(System.Collections.Generic.List{System.String})">
            <summary>
            Convert the list into a string
            </summary>
            <param name="list"></param>
            <returns>The string value of the list</returns>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.Save(System.Collections.Generic.Dictionary{System.Object,System.Object},MCForge.Entity.Player,System.Object)">
            <summary>
            Save data to the database
            </summary>
            <param name="dict"></param>
            <param name="p">The player that has the data</param>
            <param name="key">The key to locate the value</param>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.ChangeOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Changes the value or Creates it if it doesnt exist.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dict.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Get an object with out the need to cast
            </summary>
            <typeparam name="TKey">The type of key</typeparam>
            <typeparam name="TValue">The type of object to return</typeparam>
            <param name="dict">The dictionary to use</param>
            <param name="key">The key of the dictionary</param>
            <returns>An object casted to the specified type, or null if not found</returns>
            <remarks>Must have a nullable type interface</remarks>
        </member>
        <member name="M:MCForge.Utils.MiscUtils.MySqlEscape(System.String)">
            <summary>
            Cleans a string for input into a database
            </summary>
            <param name="stringToClean">The string to clean.</param>
            <returns>A cleaned string</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.GetSettingArray(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting values, use [0] at end if it only has 1 value</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.GetSetting(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value</returns>
            <remarks>Returns the first value if multiple values are present</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.GetSettingInt(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value specified by the key, or -1 if the setting is not found or could not be parsed</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.GetSettingBoolean(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value specified by the key, or false if the setting is not found</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.SetSetting(System.String,System.String,System.String[])">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="description">Write a description (optional)</param>
            <param name="values">for each string in values, it will be seperated by a comma ','</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.SetSetting(System.String,System.Int32,System.String)">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="value">value (or multiple values sperated by a comma ',') to set setting to</param>
            <param name="description">Write a description (optional)</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.SetSetting(System.String,System.Boolean,System.String)">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="value">value to set setting to</param>
            <param name="description">Write a description (optional)</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ExtraSettings.LoadSettings">
            <summary>
            Loads all the settings into the memory, if no properties file is found it will return an empty list
            </summary>
            <returns>A list of setting nodes</returns>
        </member>
        <member name="T:MCForge.Groups.PermissionLevel">
            <summary>
            All the default permission values
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.Guest">
            <summary>
            Guest permission
            <value>0</value>
            </summary>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.Builder">
            <summary>
            Builder permission
            <value>30</value>
            </summary>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.AdvBuilder">
            <summary>
            Advanced Builder permission
            <value>50</value>
            </summary>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.Operator">
            <summary>
            Operator permission
            <value>80</value>
            </summary>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.SuperOP">
            <summary>
            Super Operator permission
            <value>100</value>
            </summary>
        </member>
        <member name="F:MCForge.Groups.PermissionLevel.Owner">
            <summary>
            Owner permission
            <value>120</value>
            </summary>
        </member>
        <member name="T:MCForge.Groups.PlayerGroup">
            <summary>
            The main permission system for MCForge
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:MCForge.Groups.PlayerGroup.Groups">
            <summary>
            A list of all the available groups 
            </summary>
        </member>
        <member name="F:MCForge.Groups.PlayerGroup.Players">
            <summary>
            A list of all the players in the group (includes offline players)
            </summary>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.Groups.PlayerGroup"/> class. without adding it to the group list
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.add">
            <summary>
            Adds this instance to the list of groups ONLY use it when you initialised with PlayerGroup().
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.Groups.PlayerGroup"/> class.
            </summary>
            <param name="perm">The permission level of the group.</param>
            <param name="name">The name of the group.</param>
            <param name="colour">The colour of the group.</param>1
            <param name="file">The filename to save the group player list in</param>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.SendMessage(System.String)">
            <summary>
            Sends the message to the group.
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.CanExecute(MCForge.Interface.Command.ICommand)">
            <summary>
            Determines whether this instance can execute the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if this instance can execute the specified command; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.SaveGroup">
            <summary>
            Saves the group to disk.
            </summary>
            <returns><c>true</c> if no errors saving</returns>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.LoadGroup">
            <summary>
            Loads the group from disk.
            </summary>
            <returns><c>true</c> if no errors when loading</returns>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.AddPlayer(MCForge.Entity.Player)">
            <summary>
            Adds the player to this group.
            </summary>
            <param name="p">The p.</param>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.Load">
            <summary>
            Loads this groups player list.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.InitDefaultGroups">
            <summary>
            Initializes the default groups.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.Exists(System.String)">
            <summary>
            Checks if the specified group exists
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.PlayerGroup.Find(System.String)">
            <summary>
            Finds the specified group.
            </summary>
            <param name="name">The name of the group.</param>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.Permission">
            <summary>
            The permission level of the group.
            </summary>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.Colour">
            <summary>
            The colour of the group.
            note color == colour
            </summary>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.Color">
            <summary>
            The color of the group.
            note color == colour
            </summary>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.MaxBlockChange">
            <summary>
            The maximum amount of blocks this group can change.
            </summary>
        </member>
        <member name="P:MCForge.Groups.PlayerGroup.File">
            <summary>
            The filename to save the group list into. when setting it des not contain the "ranks/" part
            </summary>
        </member>
        <member name="T:MCForge.API.Events.CommandEndEvent">
            <summary>
            Event Class for when a command that a player called has just ended
            <remarks>Ended = End of <see cref="T:MCForge.Interface.Command.ICommand"/> Use()</remarks>
            </summary>
        </member>
        <member name="T:MCForge.API.Events.CommandEndEventArgs">
            <summary>
            Event Class for when a command that a player called has just ended
            <remarks>Ended = End of <see cref="T:MCForge.Interface.Command.ICommand"/> Use()</remarks>
            </summary>
        </member>
        <member name="M:MCForge.API.Events.CommandEndEventArgs.#ctor(MCForge.Interface.Command.ICommand,System.String[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="command">The command</param>
            <param name="args">The arguments that was passed to the command</param>
        </member>
        <member name="P:MCForge.API.Events.CommandEndEventArgs.Command">
            <summary>
            Gets the the command that was used
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandEndEventArgs.Args">
            <summary>
            Gets the argument that was used in the command.
            </summary>
        </member>
        <member name="T:MCForge.World.PerlinNoise">
            <summary>
            Implementation of 3D Perlin Noise after Ken Perlin's reference implementation.
            </summary>
        </member>
        <member name="T:MCForge.World.NoiseUtils">
            <summary>
            6
            </summary>
        </member>
        <member name="M:MCForge.World.NoiseUtils.IsOnBounds(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Determines whether the location [is on bounds] in [the specified big map].
            </summary>
            <param name="bigMap">The big map.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>
              <c>true</c> if [is on bounds] [the specified big map]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCForge.World.NoiseUtils.IsOnBounds(System.Single[0:,0:],System.Single,System.Single)">
            <summary>
            Is the X and Y in the bounds of the map bigMap
            </summary>
            <param name="bigMap">The map to check</param>
            <param name="x">The X cord.</param>
            <param name="y">The Y cord.</param>
            <returns>If true, then the position is out of bounds of the map. Otherwise it is not</returns>
        </member>
        <member name="T:MCForge.Utils.Logger">
            <summary>
            Logger Utility
            </summary>
        </member>
        <member name="M:MCForge.Utils.Logger.Init">
            <summary>
            Initializes Logger object
            </summary>
            <remarks>Must be called before any of the methods are invoked</remarks>
        </member>
        <member name="M:MCForge.Utils.Logger.DeInit">
            <summary>
            De-Initializes the logger class
            </summary>
        </member>
        <member name="M:MCForge.Utils.Logger.Log(System.String,MCForge.Utils.LogType)">
            <summary>
            Logs a message, to be grabbed by a log event handler
            </summary>
            <param name="message">The message to be logged</param>
            <param name="logType">The log type</param>
        </member>
        <member name="M:MCForge.Utils.Logger.Log(System.String,System.Drawing.Color,System.Drawing.Color,MCForge.Utils.LogType)">
            <summary>
            Logs a message, to be grabbed by a log event handler
            </summary>
            <param name="message">The message to be logged</param>
            <param name="textColor">Color of the text</param>
            <param name="bgColor">Color of the background</param> 
            <param name="logType">The log type</param>
        </member>
        <member name="M:MCForge.Utils.Logger.LogError(System.Exception)">
            <summary>
            Logs an exception, to be grabbed by a log event handler
            </summary>
            <param name="e">Exception to be logged</param>
        </member>
        <member name="E:MCForge.Utils.Logger.OnRecieveLog">
            <summary>
            This event is called when Logger.Log() is invoked
            </summary>
        </member>
        <member name="E:MCForge.Utils.Logger.OnRecieveErrorLog">
            <summary>
            This event is called when Logger.LogError() is invoked
            </summary>
        </member>
        <member name="T:MCForge.Utils.LogType">
            <summary>
            Log type for the specified message
            </summary>
        </member>
        <member name="F:MCForge.Utils.LogType.Normal">
            <summary>
            The normal messages
            </summary>
        </member>
        <member name="F:MCForge.Utils.LogType.Error">
            <summary>
            Error messages
            </summary>
        </member>
        <member name="F:MCForge.Utils.LogType.Debug">
            <summary>
            Debug messages (only appears if the server is in debugging mode)
            </summary>
        </member>
        <member name="F:MCForge.Utils.LogType.Warning">
            <summary>
            Warning messages
            </summary>
        </member>
        <member name="F:MCForge.Utils.LogType.Critical">
            <summary>
            Critical messages
            </summary>
        </member>
        <member name="T:MCForge.Utils.LogEventArgs">
             <summary>
            Log event where object holding the event
            would get a string (the message)
             </summary>
        </member>
        <member name="M:MCForge.Utils.LogEventArgs.#ctor(System.String,MCForge.Utils.LogType)">
            <summary>
            Default constructor for creating a log event
            </summary>
            <param name="log">Message of the log event</param>
            <param name="logType">Type of log event</param>
        </member>
        <member name="M:MCForge.Utils.LogEventArgs.#ctor(System.String,MCForge.Utils.LogType,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Default constructor for creating a log event
            </summary>
            <param name="log">Message of the log event</param>
            <param name="logType">Type of log event</param>
            <param name="textColor">Color of the text</param>
            <param name="bgColor">Color of the background</param>
        </member>
        <member name="P:MCForge.Utils.LogEventArgs.Message">
            <summary>
            Get or set the message of the log event
            </summary>
        </member>
        <member name="P:MCForge.Utils.LogEventArgs.LogType">
            <summary>
            Get or set the type of log
            </summary>
        </member>
        <member name="P:MCForge.Utils.LogEventArgs.TextColor">
            <summary>
            Get or set the color of the text
            </summary>
        </member>
        <member name="P:MCForge.Utils.LogEventArgs.BackgroundColor">
            <summary>
            Get or set the color of the background
            </summary>
        </member>
        <member name="T:MCForge.Core.HeartService.WBeat">
            <summary>
            The WoM heartbeat
            </summary>
        </member>
        <member name="T:MCForge.Core.HeartService.Heart">
            <summary>
            An abstract class for custom heartbeats
            </summary>
        </member>
        <member name="T:MCForge.API.Events.ChatEvent">
            <summary>
            PlayerChat event class
            </summary>
        </member>
        <member name="T:MCForge.API.Events.ChatEventArgs">
            <summary>
            PlayerChatEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ChatEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:MCForge.API.Events.ChatEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ChatEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ChatEventArgs.Equals(MCForge.API.Events.ChatEventArgs)">
            <summary>
            Compares equality (ICancelable and IStoppable are not part of the comparison)
            </summary>
            <param name="other">The value to be compared to.</param>
            <returns>Whether they are equal or not.</returns>
        </member>
        <member name="M:MCForge.API.Events.ChatEventArgs.Clone">
            <summary>
            Creates a new instance
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="P:MCForge.API.Events.ChatEventArgs.Message">
            <summary>
            Gets or sets the message
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ChatEventArgs.Username">
            <summary>
            Gets or sets the Username
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ChatEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.API.Events.OnSettingLoadArgs">
            <summary>
            Description of OnSettingLoad.
            </summary>
        </member>
        <member name="M:MCForge.API.Events.OnSettingLoadArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.OnSettingLoadArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.OnSettingLoadArgs.setting">
            <summary>
            The setting that is being loaded
            </summary>
        </member>
        <member name="P:MCForge.API.Events.OnSettingLoadArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.API.Events.Robot.TargetPlayerArgs">
            <summary>
            PlayerMoveEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.Robot.TargetPlayerArgs.#ctor(MCForge.Entity.Player)">
            <summary>
            Creates a new instance
            </summary>
            <param name="fromPosition">The position where the move started</param>
        </member>
        <member name="M:MCForge.API.Events.Robot.TargetPlayerArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.Robot.TargetPlayerArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.Robot.TargetPlayerArgs.Player">
            <summary>
            The position where the move started
            </summary>
        </member>
        <member name="P:MCForge.API.Events.Robot.TargetPlayerArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.World.Generator.GeneratorTemplate">
            <summary>
            Templates for <see cref="T:MCForge.World.Generator.GeneratorArgs"/>
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.GeneratorTemplate.Hell(MCForge.World.Level)">
            <summary>
            Hell-ish type level
            </summary>
        </member>
        <member name="T:MCForge.Core.IRC">
            <summary>
            IRC Class to connect to an Internet Relay Chat Server
            </summary>
        </member>
        <member name="M:MCForge.Core.HeartService.Heartbeat.sendHeartbeat">
            <summary>
            Sends all the heartbeats.
            </summary>
        </member>
        <member name="M:MCForge.Utils.FileUtils.CreateFileFromWeb(System.String,System.String)">
            <summary>
            Downloads  a file from the specifed website
            </summary>
            <param name="url">File address</param>
            <param name="saveLocation">Location to save the file</param>
        </member>
        <member name="M:MCForge.Utils.FileUtils.CreateFileFromBytes(System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <param name="saveLocation"></param>
        </member>
        <member name="M:MCForge.Utils.FileUtils.CreateDirIfNotExist(System.String)">
            <summary>
            Creates a directory if it doesn't exist, will log results
            </summary>
        </member>
        <member name="M:MCForge.Utils.FileUtils.CreateFileIfNotExist(System.String,System.String)">
            <summary>
            Creats a file if it doesnt already exist, logs results.
            </summary>
            <param name="fileLoc"></param>
        </member>
        <member name="M:MCForge.Robot.Bot.#ctor(System.String,MCForge.Utils.Vector3S,System.Byte[],MCForge.World.Level,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A robot (entity) that appears in the world.
            </summary>
        </member>
        <member name="M:MCForge.Robot.Bot.HandleBots">
            <summary>
            Handles bot AI
            </summary>
        </member>
        <member name="P:MCForge.Robot.Bot.Player">
            <summary>
            Player which is assigned to the bot
            </summary>
        </member>
        <member name="T:MCForge.API.Events.BlockChangeEvent">
            <summary>
            PlayerBlockChange event class
            </summary>
        </member>
        <member name="T:MCForge.API.Events.BlockChangeEventArgs">
            <summary>
            PlayerBlockChangeEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.BlockChangeEventArgs.#ctor(System.UInt16,System.UInt16,System.UInt16,MCForge.API.Events.ActionType,System.Byte)">
            <summary>
            Creates a new instance
            </summary>
            <param name="x">The positions X coordinate</param>
            <param name="y">The positions Y coordinate</param>
            <param name="z">The positions Z coordinate</param>
            <param name="action">The ActionType action</param>
            <param name="holding">The type of the block</param>
        </member>
        <member name="M:MCForge.API.Events.BlockChangeEventArgs.#ctor(MCForge.API.Events.ActionType,System.Byte,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new instance
            </summary>
            <param name="x">The positions X coordinate</param>
            <param name="y">The positions Y coordinate</param>
            <param name="z">The positions Z coordinate</param>
            <param name="action">The ActionType action</param>
            <param name="holding">The type of the block</param>
        </member>
        <member name="M:MCForge.API.Events.BlockChangeEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.BlockChangeEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.Action">
            <summary>
            What we arre doing with this block
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.Holding">
            <summary>
            The block at the coordinates
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.X">
            <summary>
            The x coordinate of the block changed.
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.Y">
            <summary>
            The y coordinate of the block changed.
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.Z">
            <summary>
            The z coordinate of the block changed.
            </summary>
        </member>
        <member name="P:MCForge.API.Events.BlockChangeEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.World.Generator.GeneratorArgs">
            <summary>
            Level Generation Arguments
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.GeneratorArgs.MAX_SIZE">
            <summary>
            A constant for the max size of a map (to be used when the size is unknown)
            </summary>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.MinLevelGenerationHeight">
            <summary>
            Gets or sets the min height of the level generation.
            </summary>
            <value>
            The height of the min level generation.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.MaxLevelGenerationHeight">
            <summary>
            Gets or sets the max height of the level generation.
            </summary>
            <value>
            The height of the max level generation.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.Seed">
            <summary>
            Gets or sets the seed.
            </summary>
            <value>
            The seed.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.MaxDepth">
            <summary>
            Gets or sets the max depth.
            </summary>
            <value>
            The max depth.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.MinDepth">
            <summary>
            Gets or sets the min depth.
            </summary>
            <value>
            The min depth.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.OverlayLayer">
            <summary>
            Gets or sets the block overlay layer.
            </summary>
            <value>
            The overlay layer.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.TopLayer">
            <summary>
            Gets or sets the top layer of block.
            </summary>
            <value>
            The top layer.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.BottomLayer">
            <summary>
            Gets or sets the bottom layer.
            </summary>
            <value>
            The bottom layer.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.LiquidBlock">
            <summary>
            Gets or sets the liquid block.
            </summary>
            <value>
            The liquid block.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.LiquidLine">
            <summary>
            Gets or sets the liquid line.
            </summary>
            <value>
            The liquid line.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.UseNewNoise">
            <summary>
            Gets or sets a value indicating whether [use new noise].
            </summary>
            <value>
              <c>true</c> if [use new noise]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.PlantTrees">
            <summary>
            Gets or sets a value indicating whether to [plant trees].
            </summary>
            <value>
              <c>true</c> if [plant trees]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.PlantSaplings">
            <summary>
            Gets or sets a value indicating whether [plant saplings].
            </summary>
            <value>
              <c>true</c> if [plant saplings]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.PlantFlowers">
            <summary>
            Gets or sets a value indicating whether [plant flowers].
            </summary>
            <value>
              <c>true</c> if [plant flowers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.PlantMushrooms">
            <summary>
            Gets or sets a value indicating whether [plant mushrooms].
            </summary>
            <value>
              <c>true</c> if [plant mushrooms]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.Amplitude">
            <summary>
            Gets or sets the amplitude.
            </summary>
            <value>
            The amplitude.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.WaveFrequency">
            <summary>
            Gets or sets the wave frequency.
            </summary>
            <value>
            The wave frequency.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.MoutainOctaves">
            <summary>
            Gets or sets the moutain octaves.
            </summary>
            <value>
            The moutain octaves.
            </value>
        </member>
        <member name="P:MCForge.World.Generator.GeneratorArgs.Persistence">
            <summary>
            Gets or sets the persistence.
            </summary>
            <value>
            The persistence.
            </value>
        </member>
        <member name="M:MCForge.Interface.LoadAllDlls.LoadDLL(System.String,System.String[])">
            <summary>
            Load a DLL
            </summary>
            <param name="s">The filepath of the DLL</param>
            <param name="args">The args to passed to the plugin OnLoad method.</param>
        </member>
        <member name="M:MCForge.Utils.Vector3S.PathTo(MCForge.Utils.Vector3S)">
            <summary>
            Creates a path to another vector
            </summary>
            <param name="vectorTo">The vector to.</param>
            <returns>An enumeration of a path from a vector to a vector</returns>
        </member>
        <member name="M:MCForge.Utils.Vector3S.Box(MCForge.Utils.Vector3S)">
            <summary>
            Boxes the specified vector.
            </summary>
            <param name="a">the vector to</param>
            <returns>a box like enumerator</returns>
        </member>
        <member name="M:MCForge.API.Events.ReceivePacketEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ReceivePacketEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ReceivePacketEventArgs.Data">
            <summary>
            Data Recieved
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ReceivePacketEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="M:MCForge.World.WorldComponent.#ctor(MCForge.World.BlockComponent[])">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.World.WorldComponent"/> class.
            </summary>
            <param name="xyz">The pieces of the component.</param>
        </member>
        <member name="M:MCForge.World.WorldComponent.DrawOnLevel(MCForge.World.Level,MCForge.Utils.Vector3S,System.Byte)">
            <summary>
            Draws the on level.
            </summary>
            <param name="mLevel">The level to draw on.</param>
            <param name="startPos">The start pos.</param>
            <param name="blockOverlay">A block to set the component as. If it is not already set</param>
            <remarks>if the block in the component is set to 255 a block overlay will be used automaticly, no block change will occur if the block is at 254</remarks>
        </member>
        <member name="F:MCForge.World.WorldComponent.LetterA">
            <summary>
            A static component for the letter 'A' (capitolized)
            </summary>
        </member>
        <member name="T:MCForge.World.BlockComponent">
            <summary>
            A struct containting a Block and position
            </summary>
        </member>
        <member name="F:MCForge.World.BlockComponent.Block">
            <summary>
            The type of block
            </summary>
        </member>
        <member name="F:MCForge.World.BlockComponent.Pos">
            <summary>
            The position
            </summary>
        </member>
        <member name="M:MCForge.World.BlockComponent.#ctor(System.Byte,MCForge.Utils.Vector3S)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.World.BlockComponent"/> struct.
            </summary>
            <param name="block">The block.</param>
            <param name="mVec">The position.</param>
        </member>
        <member name="T:MCForge.Utils.StringUtils">
            <summary>
            Set of utils for manipulating strings
            </summary>
        </member>
        <member name="M:MCForge.Utils.StringUtils.CapitolizeFirstChar(System.String)">
            <summary>
            Change your string's first character to uppercase 
            </summary>
            <param name="StringToChange">The String message to change</param>
            <returns>String Version of CapitolizeFirstChar</returns>
        </member>
        <member name="M:MCForge.Utils.StringUtils.TitleCase(System.String)">
            <summary>
            Change the specified string to title case
            EX: String = "foo bar"
            Returns "Foo Bar"
            </summary>
            <param name="StringToChange">The string to change</param>
            <returns>A string version of TitleCase</returns>
        </member>
        <member name="M:MCForge.Utils.StringUtils.ContainsBadChar(System.String)">
            <summary>
            sdfsdf
            </summary>
            <param name="message">sdfdsf</param>
            <returns>sdfsdf</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MCForge.Groups.CommandPermissionOverrides.overrides" -->
        <member name="M:MCForge.Groups.CommandPermissionOverrides.Load">
            <summary>
            Loads the data for the command permissions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.CommandPermissionOverrides.SaveDefaults">
            <summary>
            Saves the defaults from all initialised commands.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.CommandPermissionOverrides.Save">
            <summary>
            Saves the permissions to file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.CommandPermissionOverrides.SetPermission(MCForge.Interface.Command.ICommand,System.Byte)">
            <summary>
            Sets the permission of the command.
            </summary>
            <param name="cmd">The command to set the new position.</param>
            <param name="newpermission">The new permission value.</param>
            <remarks></remarks>
        </member>
        <member name="T:MCForge.SQL.MySQL">
            <summary>
            Description of MySQL.
            </summary>
        </member>
        <member name="T:MCForge.SQL.ISQL">
            <summary>
            Description of SQL.
            </summary>
        </member>
        <member name="M:MCForge.SQL.MySQL.executeQuery(System.String)">
            <summary>
            execute a query
            </summary>
            <param name="queryString">The command to execute</param>
        </member>
        <member name="M:MCForge.SQL.MySQL.executeQuery(System.String[])">
            <summary>
            Execute more than 1 command at once
            Use this in a loop or if your going to execute more than 1 thing at a time
            </summary>
            <param name="queryString">The commands to execute</param>
        </member>
        <member name="T:MCForge.API.Events.PacketEvent">
            <summary>
            The PacketEvent
            </summary>
        </member>
        <member name="T:MCForge.API.Events.PacketEventArgs">
            <summary>
            The PacketEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.PacketEventArgs.#ctor(System.Byte[],System.Boolean,MCForge.Core.packet.types)">
            <summary>
            Creates a new instance
            </summary>
            <param name="data">The packet data</param>
            <param name="incoming">True for incoming, false for outgoing packet.</param>
        </member>
        <member name="M:MCForge.API.Events.PacketEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.PacketEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.PacketEventArgs.Equals(MCForge.API.Events.PacketEventArgs)">
            <summary>
            Compares equality (ICancelable and IStoppable are not part of the comparison)
            </summary>
            <param name="other">The value to be compared to.</param>
            <returns>Whether they are equal or not.</returns>
        </member>
        <member name="M:MCForge.API.Events.PacketEventArgs.Clone">
            <summary>
            Creates a new instance
            </summary>
            <returns>A new instance</returns>
        </member>
        <member name="P:MCForge.API.Events.PacketEventArgs.Type">
            <summary>
            The packet type
            </summary>
        </member>
        <member name="P:MCForge.API.Events.PacketEventArgs.Data">
            <summary>
            Packet data
            </summary>
        </member>
        <member name="P:MCForge.API.Events.PacketEventArgs.Incoming">
            <summary>
            Gets the packet was incoming or is outgoing
            </summary>
        </member>
        <member name="P:MCForge.API.Events.PacketEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MCForge.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MCForge.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:MCForge.API.Events.CommandLoadEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.CommandLoadEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandLoadEventArgs.GetsLoaded">
            <summary>
            Gets whether the command gets loaded or unloaded.
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandLoadEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.World.Level">
            <summary>
            This class is used for loading/saving/handling/manipulation of server levels.
            </summary>
        </member>
        <member name="F:MCForge.World.Level.Levels">
            <summary>
            List of levels on the server (loaded)
            </summary>
        </member>
        <member name="F:MCForge.World.Level.Size">
            <summary>
            This is the size of the level
            </summary>
        </member>
        <member name="F:MCForge.World.Level.SpawnPos">
            <summary>
            Levels current Spawn position
            </summary>
        </member>
        <member name="F:MCForge.World.Level.SpawnRot">
            <summary>
            Levels current Spawn ROT
            </summary>
        </member>
        <member name="F:MCForge.World.Level.Data">
            <summary>
            This holds the map data for the entire map
            </summary>
        </member>
        <member name="F:MCForge.World.Level.ExtraData">
            <summary>
            Data to store with in the level
            </summary>
        </member>
        <member name="M:MCForge.World.Level.CreateLevel(MCForge.Utils.Vector3S,MCForge.World.Level.LevelTypes,System.String)">
            <summary>
            Create a level with a specified type and a specified size
            </summary>
            <param name="size">The size to create the level.</param>
            <param name="type">The type of the level you want to create</param>
            <param name="name">Name of the level to create</param>
            <returns>
            returns the level that was created
            </returns>
        </member>
        <member name="M:MCForge.World.Level.LoadLevel(System.String)">
            <summary>
            Load a level.
            </summary>
            <returns>The loaded level</returns>
        </member>
        <member name="M:MCForge.World.Level.SaveToBinary">
            <summary>
            Saves this world to a given directory
            in the MCForge-only binary format.
            </summary>
            <remarks>The resulting files are not compatible with the official Minecraft software.</remarks>
        </member>
        <member name="M:MCForge.World.Level.ForEachBlockXZY(MCForge.World.Level.ForEachBlockDelegateXZY)">
            <summary>
            loop through all the blocks in xzy running a delegated method for each block, the delegated method will be bassed coordinated in xzy format
            </summary>
            <param name="FEBD">the delegate to call on each cycle</param>
        </member>
        <member name="M:MCForge.World.Level.ForEachBlock(MCForge.World.Level.ForEachBlockDelegate)">
            <summary>
            loop through all the blocks in xzy running a delegated method for each block, the delegated method will be passed coordinated in int format
            </summary>
            <param name="FEBD">the delegate to call on each cycle</param>
        </member>
        <member name="M:MCForge.World.Level.BlockChange(System.UInt16,System.UInt16,System.UInt16,System.Byte,MCForge.Entity.Player)">
            <summary>
            Causes a block change for the level
            </summary>
            <param name="x">Location of x</param>
            <param name="z">Location of z</param>
            <param name="y">Location of y</param>
            <param name="block">Block to set</param>
            <param name="p">A player who doesn't need the update.</param>
        </member>
        <member name="M:MCForge.World.Level.BlockChange(MCForge.Utils.Vector3D,System.Byte,MCForge.Entity.Player)">
            <summary>
            Causes a block change for the level
            </summary>
            <param name="vector">Position of the block</param>
            <param name="block">Block to set</param>
            <param name="p">A player who doesn't need the update.</param>
        </member>
        <member name="M:MCForge.World.Level.BlockChange(MCForge.Utils.Vector3S,System.Byte,MCForge.Entity.Player)">
            <summary>
            Causes a block change for the level
            </summary>
            <param name="vector">Position of the block</param>
            <param name="block">Block to set</param>
            <param name="p">A player who doesn't need the update.</param>
        </member>
        <member name="M:MCForge.World.Level.IsInBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the position is in bounds of the level.
            </summary>
            <param name="x">The x pos.</param>
            <param name="z">The z pos.</param>
            <param name="y">The y pos.</param>
            <returns>
              <c>true</c> if [is in bounds] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCForge.World.Level.IsInBounds(MCForge.Utils.Vector3S)">
            <summary>
            Determines whether the specified vector is in bounds of the level.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
              <c>true</c> if [is in bounds] [the specified vector]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCForge.World.Level.IsInBounds(MCForge.Utils.Vector3D)">
            <summary>
            Determines whether the specified vector is in bounds of the level.
            </summary>
            <param name="vector">The vector.</param>
            <returns>
              <c>true</c> if [is in bounds] [the specified vector]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(MCForge.Utils.Vector3S)">
            <summary>
            get the block (byte) at an xzy pos
            </summary>
            <param name="pos">the pos to check and return</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            get the block at a given xzy pos
            </summary>
            <param name="x">x pos to get</param>
            <param name="z">z pos to get</param>
            <param name="y">y pos to get</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            get the block at a given xzy position
            </summary>
            <param name="x">x pos to get</param>
            <param name="z">z pos to get</param>
            <param name="y">y pos to get</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.Int32)">
            <summary>
            Get the block at a given pos in the data array
            </summary>
            <param name="pos">the pos to get the block from</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.PosToInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert a pos (xzy) into a single INT pos
            </summary>
            <param name="x">X position to convert</param>
            <param name="z">Z position to convert</param>
            <param name="y">Y position to convert</param>
            <returns>an integer representing the given block position in the DATA array above.</returns>
        </member>
        <member name="M:MCForge.World.Level.IntToPos(System.Int32)">
            <summary>
            Convert an int POS to an xzy pos
            </summary>
            <param name="pos">The int pos to convert</param>
            <returns>a 3 dimensional representation of the block position</returns>
        </member>
        <member name="M:MCForge.World.Level.IntOffset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the position (int) relative to a given block position (int) given an offset of xzy
            </summary>
            <param name="pos">the integral pos to start at</param>
            <param name="x">the offset along the x axis</param>
            <param name="z">the offset along the z axis</param>
            <param name="y">the offset along the y axis</param>
            <returns>returns an int representing the offset block location in the data array</returns>
        </member>
        <member name="M:MCForge.World.Level.Compress(System.Byte[])">
            <summary>
            Compresses the specified byte array.
            </summary>
            <param name="input">The byte array.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.World.Level.Decompress(System.Byte[])">
            <summary>
            Decompresses the specified byte array.
            </summary>
            <param name="gzip">The byte array.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.World.Level.FindLevel(System.String)">
            <summary>
            Finds the specified level.
            </summary>
            <param name="LevelName">Name of the level.</param>
        </member>
        <member name="M:MCForge.World.Level.AddLevel(MCForge.World.Level)">
            <summary>
            Adds the level to the level list.
            </summary>
            <param name="level">Name of the level.</param>
        </member>
        <member name="M:MCForge.World.Level.HandleMetaData">
            <summary>
            Handles the extra data for the level
            </summary>
        </member>
        <member name="P:MCForge.World.Level.Name">
            <summary>
            Name of the level
            </summary>
        </member>
        <member name="P:MCForge.World.Level.TotalBlocks">
            <summary>
            Get the total blocks in the level
            </summary>
        </member>
        <member name="T:MCForge.World.Level.ForEachBlockDelegateXZY">
            <summary>
            This delegate is used for looping through the blocks in a level in an automated fashion, and each cycle returns the position in xzy format
            </summary>
            <param name="x">the loops current block location (x)</param>
            <param name="z">the loops current block location (z)</param>
            <param name="y">the loops current block location (y)</param>
        </member>
        <member name="T:MCForge.World.Level.ForEachBlockDelegate">
            <summary>
            This delegate is used for looping through the blocks in a level in an automated fashion, and each cycle returns the position in POS format
            </summary>
            <param name="pos">the loops current block position (pos)</param>
        </member>
        <member name="T:MCForge.World.Level.LevelTypes">
            <summary>
            An enumeration of all the types of levels
            </summary>
        </member>
        <member name="F:MCForge.World.Level.LevelTypes.Flat">
            <summary>
            Grass half way up the map, flat
            </summary>
        </member>
        <member name="F:MCForge.World.Level.LevelTypes.Pixel">
            <summary>
            White walls, with a black floor
            </summary>
        </member>
        <member name="F:MCForge.World.Level.LevelTypes.Hell">
            <summary>
            Inspired from the Nether
            </summary>
        </member>
        <member name="T:MCForge.Interface.Command.ICommand">
            <summary>
            Interface for Commands
            </summary>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Use(MCForge.Entity.Player,System.String[])">
            <summary>
            The method that will be called when a player uses this command
            </summary>
            <param name="p">a Player class</param>
            <param name="args">the args of the command the player sent</param>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Help(MCForge.Entity.Player)">
            <summary>
            The method to run when a player uses the /help command
            </summary>
            <param name="p">a Player instance</param>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Initialize">
            <summary>
            The initialization of the command, you need to add command references here.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Name">
            <summary>
            The name of the command
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Type">
            <summary>
            The type of command this is
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Author">
            <summary>
            The author of the command (to add multiple authors just make the string like "Merlin33069, someone else"
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Version">
            <summary>
            The command version
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.CUD">
            <summary>
            Unique identifier for this plugin, will be used later to link to MCForge databases
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Permission">
            <summary>
            The default permission value for the command
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:MCForge.Core.HeartService.MBeat">
            <summary>
            The Minecraft Heartbeat
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPlugin.OnLoad(System.String[])">
            <summary>
            The initialization of the plugin.
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPlugin.OnUnload">
            <summary>
            The unload of a plugin.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Name">
            <summary>
            The name of the plugin
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Author">
            <summary>
            The author of the plugin (to add multiple authors just make the string like "Merlin33069, someone else"
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Version">
            <summary>
            The command version
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.CUD">
            <summary>
            Unique identifier for this plugin, will be used later to link to McForge databases
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.ShowFirstRunScreen">
            <summary>
            Show the first run screen?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.moneys">
            <summary>
            The name of the server currency.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.VerifyGroup">
            <summary>
            The miniumum rank that needs to verify.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Verifying">
            <summary>
            Do people need to use /pass?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.owner">
            <summary>
            The server owner.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.grieferstoneperm">
            <summary>
            The rank that can destroy griefer_stone without getting kicked
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.grieferstonewarns">
            <summary>
            The amount of griefer_stone warns player will recieve before getting kicked
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.shuttingDown">
            <summary>
            Get whether the server is currently shutting down
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Started">
            <summary>
            Get whether the server is currently fully started or not
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Players">
            <summary>
            Get the current list of online players, note that if you're doing a foreach on this always add .ToArray() to the end, it solves a LOT of issues
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Bots">
            <summary>
            Get the current list of bots, note that if you're doing a foreach on this always add .ToArray() to the end, it solves a LOT of issues
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.IPBans">
            <summary>
            The current list of banned IP addresses. Note that if you do a foreach on this (or any other public list) you should always add .ToArray() to the end to avoid errors!
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.UsernameBans">
            <summary>
            The list of banned usernames. Note that if you do a foreach on this (or any other public list) you should always add .ToArray() to the end to avoid errors!
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.devs">
            <summary>
            The list of MCForge developers.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.reviewlist">
            <summary>
            List of players that need to be reviewed
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.agreed">
            <summary>
            List of players that agreed to the rules
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Mainlevel">
            <summary>
            The main level of the server, where players spawn when they first join
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.moderation">
            <summary>
            Determines if the chat moderation is enabled
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.voting">
            <summary>
            Is the server in voting mode?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.kickvote">
            <summary>
            Is it a kickvote?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.YesVotes">
            <summary>
            Amount of yes votes.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.NoVotes">
            <summary>
            Amount of no votes.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.kicker">
            <summary>
            The player who's getting, if it's /votekick
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.URL">
            <summary>
            The minecraft.net URL of the server
            </summary>
            
        </member>
        <member name="F:MCForge.Core.Server.IRC">
            <summary>
            The IRC client for the server
            </summary>
        </member>
        <member name="M:MCForge.Core.Server.ForeachPlayer(MCForge.Core.Server.ForeachPlayerDelegate)">
            <summary>
            Loops through online players
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MCForge.Core.Server.AddTimedMethod(MCForge.Core.Server.TimedMethodDelegate,System.Int32,System.Int32,System.Object)">
            <summary>
            Add a method to be called in a specified time for a specified number of repetitions
            </summary>
            <param name="d">The delegate representing the method to be called</param>
            <param name="time">The amount of milliseconds you want to wait to call this method, and to wait inbetween each calling if it repeats (note that this is rounded to 10ths of a second)</param>
            <param name="repeat">the number of times to repeat this call</param>
            <param name="PassBack">the object to pass back to the method that is called.</param>
        </member>
        <member name="M:MCForge.Core.Server.Log(System.String)">
            <summary>
            Write A message to the Console and the GuiLog using default (white on black) colors.
            </summary>
            <param name="message">The message to show</param>
        </member>
        <member name="M:MCForge.Core.Server.Log(System.Exception)">
            <summary>
            Write an error to the Console and the GuiLog using Red on black colors
            </summary>
            <param name="E">The error exception to write.</param>
        </member>
        <member name="M:MCForge.Core.Server.Log(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Write a message to the console and GuiLog using a specified TextColor and BackGround Color
            </summary>
            <param name="message">The Message to show</param>
            <param name="TextColor">The color of the text to show</param>
            <param name="BackgroundColor">The color behind the text.</param>
        </member>
        <member name="M:MCForge.Core.Server.Stop">
            <summary>
            Stops the server
            </summary>
        </member>
        <member name="M:MCForge.Core.Server.Restart">
            <summary>
            Restarts the server (TODO - Mono compatible)
            </summary>
        </member>
        <member name="M:MCForge.Core.Server.SaveAll">
            <summary>
            Saves all of the levels and groups
            </summary>
        </member>
        <member name="P:MCForge.Core.Server.DefaultColor">
            <summary>
            The default color
            </summary>
        </member>
        <member name="T:MCForge.Core.Server.TimedMethodDelegate">
            <summary>
            This delegate is used when a command or plugin needs to call a method after a certain amount of time
            </summary>
            <param name="dataPass">This delegate passes the object that was passed to it back to the method that is to be invoked</param>
            <returns>this delegate returns an updated object for the datapass</returns>
        </member>
        <member name="T:MCForge.Interface.Plugin.IPluginMessageViewer">
            <summary>
            Interface for making a plugin with a message viewer
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowMessage(MCForge.Entity.Player,System.String)">
            <summary>
            Starts showing a message.
            </summary>
            <param name="p">The player to show the message to.</param>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.AppendText(MCForge.Entity.Player,System.String)">
            <summary>
            Appends text at the end of the message.
            </summary>
            <param name="p">The player to append the message to</param>
            <param name="text">The message to append.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowNextPage(MCForge.Entity.Player)">
            <summary>
            Shows the next page if possible.
            </summary>
            <param name="p">The player to show the next page to. </param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPage(MCForge.Entity.Player,System.Int32)">
            <summary>
            Shows a selected page if possible.
            </summary>
            <param name="p">The player to show the page to.</param>
            <param name="page">The page to show.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowNextLine(MCForge.Entity.Player)">
            <summary>
            Shows next line if possible.
            </summary>
            <param name="p">The player to show the line to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPreviousPage(MCForge.Entity.Player)">
            <summary>
            Shows previous page if possible.
            </summary>
            <param name="p">The player to show the page to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPreviousLine(MCForge.Entity.Player)">
            <summary>
            Shows previous line if possible.
            </summary>
            <param name="p">The player to show the line to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.Stop(MCForge.Entity.Player)">
            <summary>
            Stops showing the message.
            </summary>
            <param name="p">The player to stop showing the message to.</param>
        </member>
        <member name="T:MCForge.World.Generator.LevelGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.OnProgressArgs">
            <summary>
            Event handler for recieving progress updates
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.#ctor(MCForge.World.Level)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.World.Generator.LevelGenerator"/> class.
            </summary>
            <param name="level">The level to generate.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.#ctor(MCForge.World.Level,MCForge.World.Generator.GeneratorArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.World.Generator.LevelGenerator"/> class.
            </summary>
            <param name="level">The level.</param>
            <param name="args">The Generator arguments.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.Generate">
            <summary>
            Generates the map.
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillX(System.Int32,System.Int32,MCForge.World.Block)">
            <summary>
            Fills the X layer.
            </summary>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillY(System.Int32,System.Int32,MCForge.World.Block)">
            <summary>
            Fills the Y layer.
            </summary>
            <param name="x">The x.</param>
            <param name="z">The z.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillZ(System.Int32,System.Int32,MCForge.World.Block)">
            <summary>
            Fills the Z layer.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillPlaneXY(System.Int32,MCForge.World.Block)">
            <summary>
            Fills the plane XY.
            </summary>
            <param name="z">The z.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillPlaneXZ(System.Int32,MCForge.World.Block)">
            <summary>
            Fills the plane XZ.
            </summary>
            <param name="y">The y.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.FillPlaneZY(System.Int32,MCForge.World.Block)">
            <summary>
            Fills the plane ZY.
            </summary>
            <param name="x">The x.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.IsOnEdges(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if the specified location is on the border of the map
            </summary>
            <param name="x">Location of the block on the x axis</param>
            <param name="z">Location of the block on the z axis</param>
            <param name="y">Location of the block on the y axis</param>
            <returns>Returns if the specified location is on the border of the map</returns>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.GenerateNoise">
            <summary>
            Generates a blocky non smooth version of a terrain. To be smoothed later in other methods
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.ApplyFilter">
            <summary>
            Applies the filter.
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.SetBlocks">
            <summary>
            Sets the blocks.
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.Generate3DTerrain">
            <summary>
            Transforms the 2D height map into 3D
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.GenerateTree(MCForge.World.Generator.LevelGenerator.TreeType,MCForge.Utils.Vector3S)">
            <summary>
            Generate a tree at any location
            </summary>
            <param name="type">Type of tree to generate</param>
            <param name="pos">Location to generate the tree</param>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.SetPosition">
            <summary>
            Sets the position of the spawn point.
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.SetPosition(MCForge.Utils.Vector3S,MCForge.Utils.Vector2S)">
            <summary>
            Sets the position of the spawn point.
            </summary>
            <param name="manualPosition">The position.</param>
            <param name="angleRot">The angle rotation.</param>
        </member>
        <member name="T:MCForge.World.Generator.LevelGenerator.GenerationEventArgs">
            <summary>
            Generation Event args to track the status of the current generation job
            </summary>
        </member>
        <member name="M:MCForge.World.Generator.LevelGenerator.GenerationEventArgs.#ctor(System.String,System.Byte)">
            <summary>
            Constructor for a generator event argument
            </summary>
            <param name="message">Message to give</param>
            <param name="increment">Value to increase by</param>
        </member>
        <member name="P:MCForge.World.Generator.LevelGenerator.GenerationEventArgs.Message">
            <summary>
            Message with in the event args
            </summary>
        </member>
        <member name="P:MCForge.World.Generator.LevelGenerator.GenerationEventArgs.Increment">
            <summary>
            Increment to increase by
            </summary>
        </member>
        <member name="T:MCForge.World.Generator.LevelGenerator.TreeType">
            <summary>
            Enum containing the types of trees that can be generated
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.Big">
            <summary>
            MCForge's version of a big tree
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.Small">
            <summary>
            MCForge's version of a small tree
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.Thin">
            <summary>
            MCForge's verion of a thin tree
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.Fat">
            <summary>
            MCForge's version of a fat tree
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.NotchBig">
            <summary>
            Notch's version of a big tree
            </summary>
        </member>
        <member name="F:MCForge.World.Generator.LevelGenerator.TreeType.NotchSmall">
            <summary>
            Notch's version of a small tree
            </summary>
        </member>
        <member name="T:MCForge.SQL.SQLite">
            <summary>
            Description of SQLite.
            </summary>
        </member>
        <member name="T:MCForge.API.Events.DataSavedEventArgs">
            <summary>
            PlayerBlockChangeEventArgs
            </summary>
        </member>
        <member name="T:MCForge.API.Events.ConnectionEvent">
            <summary>
            PlayerConnection event class
            </summary>
        </member>
        <member name="T:MCForge.API.Events.ConnectionEventArgs">
            <summary>
            PlayConnectionEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ConnectionEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a new instance
            </summary>
            <param name="connected">Whether the player is connected or not</param>
        </member>
        <member name="M:MCForge.API.Events.ConnectionEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.ConnectionEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ConnectionEventArgs.Connected">
            <summary>
            Whether the player is connected or not
            </summary>
        </member>
        <member name="P:MCForge.API.Events.ConnectionEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.Utils.Settings.ServerSettings">
            <summary>
            Settings Utility
            </summary>
        </member>
        <member name="F:MCForge.Utils.Settings.ServerSettings.OnSettingChanged">
            <summary>
            This event is triggered when a setting node is changed in anyway
            </summary>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.Init">
            <summary>
            Starts the Settings Object
            </summary>
            <remarks>Must be called before any methods are invoked</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.GetSettingArray(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting values, use [0] at end if it only has 1 value</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.GetSetting(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value</returns>
            <remarks>Returns the first value if multiple values are present</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.GetSettingInt(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value specified by the key, or -1 if the setting is not found or could not be parsed</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.GetSettingBoolean(System.String)">
            <summary>
            Gets a setting
            </summary>
            <param name="key">The key</param>
            <returns>The setting value specified by the key, or false if the setting is not found</returns>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.SetSetting(System.String,System.String,System.String[])">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="description">Write a description (optional)</param>
            <param name="values">for each string in values, it will be seperated by a comma ','</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.SetSetting(System.String,System.Int32,System.String)">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="value">value (or multiple values sperated by a comma ',') to set setting to</param>
            <param name="description">Write a description (optional)</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.SetSetting(System.String,System.Boolean,System.String)">
            <summary>
            Set the setting
            </summary>
            <param name="key">key to save value to</param>
            <param name="value">value to set setting to</param>
            <param name="description">Write a description (optional)</param>
            <remarks>If the setting does not exist, it will create a new one</remarks>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.Save">
            <summary>
            Saves the settings
            </summary>
        </member>
        <member name="M:MCForge.Utils.Settings.ServerSettings.LoadSettings">
            <summary>
            Loads all the settings into the memory, if no properties file is found nothing will happen
            </summary>
        </member>
        <member name="T:MCForge.Utils.Settings.SettingsChangedEventArgs">
            <summary>
            Called When a setting node is changed
            </summary>
        </member>
        <member name="M:MCForge.Utils.Settings.SettingsChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new Settings Changed Event Class
            </summary>
            <param name="key">Name of key in lowercase</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">value to change</param>
        </member>
        <member name="P:MCForge.Utils.Settings.SettingsChangedEventArgs.Key">
            <summary>
            The key of the setting
            </summary>
        </member>
        <member name="P:MCForge.Utils.Settings.SettingsChangedEventArgs.OldValue">
            <summary>
            The value before it was changed
            </summary>
        </member>
        <member name="P:MCForge.Utils.Settings.SettingsChangedEventArgs.NewValue">
            <summary>
            The new value of the setting
            </summary>
        </member>
        <member name="T:MCForge.Utils.Settings.SettingNode">
            <summary>
            A simple class housing information of a setting key, value, and description
            </summary>
        </member>
        <member name="M:MCForge.API.Events.PluginLoadEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.PluginLoadEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.PluginLoadEventArgs.GetsLoaded">
            <summary>
            Gets whether the command gets loaded or unloaded.
            </summary>
        </member>
        <member name="P:MCForge.API.Events.PluginLoadEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
        <member name="T:MCForge.API.Events.CommandEvent">
            <summary>
            PlayerCommand event class
            </summary>
        </member>
        <member name="T:MCForge.API.Events.CommandEventArgs">
            <summary>
            PlayerCommandEventArgs
            </summary>
        </member>
        <member name="M:MCForge.API.Events.CommandEventArgs.#ctor(System.String,System.String[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="command">The command (it might does not exist)</param>
            <param name="args">The arguments to be passed to the command</param>
        </member>
        <member name="M:MCForge.API.Events.CommandEventArgs.Cancel">
            <summary>
            Cancels the handling
            </summary>
        </member>
        <member name="M:MCForge.API.Events.CommandEventArgs.Allow">
            <summary>
            Allows the handling
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandEventArgs.Command">
            <summary>
            The command (it might does not exist)
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandEventArgs.Args">
            <summary>
            The arguments to be passed to the command
            </summary>
        </member>
        <member name="P:MCForge.API.Events.CommandEventArgs.Canceled">
            <summary>
            Whether or not the handling should be canceled
            </summary>
        </member>
    </members>
</doc>
