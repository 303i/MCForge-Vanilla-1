<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCForge</name>
    </assembly>
    <members>
        <member name="T:MCForge.Groups.Permission">
            <summary>
            All the default permission values
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.Group.#ctor(System.Byte,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MCForge.Groups.Group"/> class.
            </summary>
            <param name="perm">The permission level of the group.</param>
            <param name="name">The name of the group.</param>
            <param name="colour">The colour of the group.</param>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.Group.SendMessage(System.String)">
            <summary>
            Sends the message to the group.
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:MCForge.Groups.Group.CanExecute(MCForge.Interface.Command.ICommand)">
            <summary>
            Determines whether this instance can execute the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns><c>true</c> if this instance can execute the specified command; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:MCForge.Groups.Group.name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:MCForge.Groups.Group.permission">
            <summary>
            The permission level of the group.
            </summary>
        </member>
        <member name="P:MCForge.Groups.Group.colour">
            <summary>
            The colour of the group.
            </summary>
        </member>
        <member name="M:MCForge.Core.PDB.CompareTo(MCForge.Core.PDB)">
            <summary>
            This allows a PDB to be compared to another PDB by looking at the username, and subsequently, it can then be sorted.
            </summary>
            <param name="pdb">The comparing PDB</param>
            <returns>returns a comparison of the usernames</returns>
        </member>
        <member name="T:MCForge.API.PlayerEvent.OnPlayerChat">
            <summary>
            The OnPlayerChat event is excuted everytime a player chats on the server
            This event can be canceled
            </summary>
        </member>
        <member name="M:MCForge.API.Event.Call">
            <summary>
            Call the event
            </summary>
        </member>
        <member name="M:MCForge.API.Cancelable.Cancel(System.Boolean)">
            <summary>
            Cancel the event
            </summary>
            <param name="value">True will cancel the event, false will un-cancel the event</param>
        </member>
        <member name="P:MCForge.API.Cancelable.IsCanceled">
            <summary>
            Is the event canceled
            </summary>
        </member>
        <member name="M:MCForge.API.PlayerEvent.PlayerEvent.GetPlayer">
            <summary>
            Get the player connected to the event
            </summary>
            <returns>The player</returns>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.Call">
            <summary>
            Call the event
            </summary>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.GetMessage">
            <summary>
            Get the message the player sent
            </summary>
            <returns>The message</returns>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.SetMessage(System.String)">
            <summary>
            Change the message the player sent
            </summary>
            <param name="message">The new message</param>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.Cancel(System.Boolean)">
            <summary>
            Cancel the event
            </summary>
            <param name="value">True will cancel the event, false will un-cancel the event</param>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.GetPlayer">
            <summary>
            Get the player connected to the event
            </summary>
            <returns>The player</returns>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerChat.Register(MCForge.API.PlayerEvent.OnPlayerChat.OnCall,MCForge.API.Priority)">
            <summary>
            Register this event
            </summary>
            <param name="method">The method to call when this event gets excuted</param>
            <param name="priority">The importance of the call</param>
        </member>
        <member name="P:MCForge.API.PlayerEvent.OnPlayerChat.IsCanceled">
            <summary>
            Is the event canceled
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPlugin.Initialize">
            <summary>
            The initialization of the plugin.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Name">
            <summary>
            The name of the plugin
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Author">
            <summary>
            The author of the plugin (to add multiple authors just make the string like "Merlin33069, someone else"
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.Version">
            <summary>
            The command version
            </summary>
        </member>
        <member name="P:MCForge.Interface.Plugin.IPlugin.CUD">
            <summary>
            Unique identifier for this plugin, will be used later to link to McForge databases
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowMessage(MCForge.Entity.Player,System.String)">
            <summary>
            Starts showing a message.
            </summary>
            <param name="p">The player to show the message to.</param>
            <param name="message">The message to show.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.AppendText(MCForge.Entity.Player,System.String)">
            <summary>
            Appends text at the end of the message.
            </summary>
            <param name="p">The player to append the message to</param>
            <param name="text">The message to append.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowNextPage(MCForge.Entity.Player)">
            <summary>
            Shows the next page if possible.
            </summary>
            <param name="p">The player to show the next page to. </param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPage(MCForge.Entity.Player,System.Int32)">
            <summary>
            Shows a selected page if possible.
            </summary>
            <param name="p">The player to show the page to.</param>
            <param name="page">The page to show.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowNextLine(MCForge.Entity.Player)">
            <summary>
            Shows next line if possible.
            </summary>
            <param name="p">The player to show the line to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPreviousPage(MCForge.Entity.Player)">
            <summary>
            Shows previous page if possible.
            </summary>
            <param name="p">The player to show the page to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.ShowPreviousLine(MCForge.Entity.Player)">
            <summary>
            Shows previous line if possible.
            </summary>
            <param name="p">The player to show the line to.</param>
        </member>
        <member name="M:MCForge.Interface.Plugin.IPluginMessageViewer.Stop(MCForge.Entity.Player)">
            <summary>
            Stops showing the message.
            </summary>
            <param name="p">The player to stop showing the message to.</param>
        </member>
        <member name="T:MCForge.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MCForge.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MCForge.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Use(MCForge.Entity.Player,System.String[])">
            <summary>
            The method that will be called when a player uses this command
            </summary>
            <param name="p">a Player class</param>
            <param name="args">the args of the command the player sent</param>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Help(MCForge.Entity.Player)">
            <summary>
            The method to run when a player uses the /help command
            </summary>
            <param name="p">a Player instance</param>
        </member>
        <member name="M:MCForge.Interface.Command.ICommand.Initialize">
            <summary>
            The initialization of the command, you need to add command references here.
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Name">
            <summary>
            The name of the command
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Type">
            <summary>
            The type of command this is
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Author">
            <summary>
            The author of the command (to add multiple authors just make the string like "Merlin33069, someone else"
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Version">
            <summary>
            The command version
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.CUD">
            <summary>
            Unique identifier for this plugin, will be used later to link to MCForge databases
            </summary>
        </member>
        <member name="P:MCForge.Interface.Command.ICommand.Permission">
            <summary>
            The default permission value for the command
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:MCForge.Core.Server.shuttingDown">
            <summary>
            Get whether the server is currently shutting down
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Started">
            <summary>
            Get whether the server is currently fully started or not
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Players">
            <summary>
            Get the current list of online players, note that if your doing a foreach on this always add .ToArray() to the end, it solves a LOT of issues
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.BannedIP">
            <summary>
            Get the current list of banned ip addresses, note that if your doing a foreach on this (or any other public list) you should always add .ToArray() to the end so that you avoid errors!
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.devs">
            <summary>
            The list of MCForge developers.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.agreed">
            <summary>
            List of players that agreed to the rules
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.Mainlevel">
            <summary>
            The main level of the server, where players spawn when they first join
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.moderation">
            <summary>
            Determines if the chat moderation is enabled
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.voting">
            <summary>
            Is the server in voting mode?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.kickvote">
            <summary>
            Is it a kickvote?
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.YesVotes">
            <summary>
            Amount of yes votes.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.NoVotes">
            <summary>
            Amount of no votes.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.kicker">
            <summary>
            The player who's getting, if it's /votekick
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.DefaultColor">
            <summary>
            The server's default color.
            </summary>
        </member>
        <member name="F:MCForge.Core.Server.URL">
            <summary>
            The minecraft.net URL of the server
            </summary>
            
        </member>
        <member name="M:MCForge.Core.Server.Log(System.String)">
            <summary>
            Write A message to the Console and the GuiLog using default (white on black) colors.
            </summary>
            <param name="message">The message to show</param>
        </member>
        <member name="M:MCForge.Core.Server.Log(System.Exception)">
            <summary>
            Write an error to the Console and the GuiLog using Red on black colors
            </summary>
            <param name="E">The error exception to write.</param>
        </member>
        <member name="M:MCForge.Core.Server.Log(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            Write a message to the console and GuiLog using a specified TextColor and BackGround Color
            </summary>
            <param name="message">The Message to show</param>
            <param name="TextColor">The color of the text to show</param>
            <param name="BackgroundColor">The color behind the text.</param>
        </member>
        <member name="M:MCForge.Core.Heartbeat.minecraftHeartbeat(System.Int32,System.String,System.Boolean,System.String,System.Int32,System.Byte,System.Byte)">
            <summary>
            Sends a heartbeat to minecraft.net.
            </summary>
            <param name="port">The port.</param>
            <param name="serverName">Name of the server.</param>
            <param name="Public">If set to <c>true</c> [public].</param>
            <param name="salt">The salt.</param>
            <param name="onlineUsers">The online users.</param>
            <param name="maxUsers">The max users.</param>
        </member>
        <member name="M:MCForge.Core.Heartbeat.sendHeartbeat">
            <summary>
            Sends all the heartbeats.
            </summary>
            <param name="port">The port the server is running on.</param>
            <param name="serverName">Name of the server.</param>
            <param name="Public">If the server is public or not.</param>
            <param name="salt">The server salt salt.</param>
            <param name="onlineUsers">The number of online users.</param>
            <param name="maxUsers">The maximum amount of users.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:MCForge.Core.ServerSettings.Appending">
            <summary>
            Is message appending enabled?
            </summary>
        </member>
        <member name="F:MCForge.Core.ServerSettings.higherranktp">
            <summary>
            Allow people teleport to higher ranks?
            </summary>
        </member>
        <member name="F:MCForge.Core.ServerSettings.DefaultRank">
            <summary>
            The default Permission value for new players
            </summary>
        </member>
        <member name="P:MCForge.Core.ServerSettings.DefaultGroup">
            <summary>
            Gets or sets the default group.
            </summary>
            <value>The default group.</value>
            <remarks></remarks>
        </member>
        <member name="T:MCForge.Interface.Plugin.PluginManager">
            <summary>
            The command class, used to store commands for players to use
            </summary>
        </member>
        <member name="M:MCForge.Interface.Plugin.PluginManager.getByInterface(System.String)">
            <summary>
            Gets a plugin by interface.
            </summary>
            <param name="name">The name of the interface</param>
            <returns></returns>
        </member>
        <member name="M:MCForge.Interface.Plugin.PluginManager.AddReference(MCForge.Interface.Plugin.IPlugin)">
            <summary>
            Add an array of references to your command here
            </summary>
            <param name="plugin">The plugin d that this reference... references, you should most likely use 'this'</param>    
        </member>
        <member name="T:MCForge.Interface.Command.Command">
            <summary>
            The command class, used to store commands for players to use
            </summary>
        </member>
        <member name="M:MCForge.Interface.Command.Command.AddReference(MCForge.Interface.Command.ICommand,System.String[])">
            <summary>
            Add an array of referances to your command here
            </summary>
            <param name="command">the command that this referance... referances, you should most likely use 'this'</param>
            <param name="reference">the array of strings you want players to type to use your command</param>
        </member>
        <member name="M:MCForge.Interface.Command.Command.AddReference(MCForge.Interface.Command.ICommand,System.String)">
            <summary>
            Add a referance to your command here
            </summary>
            <param name="command">the command that this referance... referances, you should most likely use 'this'</param>
            <param name="reference">the string you want player to type to use your command, you can use this method more than once :)</param>
        </member>
        <member name="F:MCForge.frmMain.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MCForge.frmMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MCForge.frmMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MCForge.World.Level">
            <summary>
            This class is used for loading/saving/handling/manipulation of server levels.
            </summary>
        </member>
        <member name="F:MCForge.World.Level.Size">
            <summary>
            This is the size of the level
            </summary>
        </member>
        <member name="F:MCForge.World.Level.SpawnPos">
            <summary>
            Levels current Spawn position
            </summary>
        </member>
        <member name="F:MCForge.World.Level.SpawnRot">
            <summary>
            Levels current Spawn ROT
            </summary>
        </member>
        <member name="F:MCForge.World.Level.data">
            <summary>
            This holds the map data for the entire map
            </summary>
        </member>
        <member name="M:MCForge.World.Level.CreateLevel(MCForge.Core.Point3,MCForge.World.Level.LevelTypes,System.String)">
            <summary>
            Create a level with a specified type and a specified size
            </summary>
            <param name="size">The size to create the level.</param>
            <param name="type">The type of the level you want to create</param>
            <returns>returns the level that was created</returns>
        </member>
        <member name="M:MCForge.World.Level.LoadLevel">
            <summary>
            Load a level (todo)
            </summary>
            <returns>the loaded level</returns>
        </member>
        <member name="M:MCForge.World.Level.ForEachBlockXZY(MCForge.World.Level.ForEachBlockDelegateXZY)">
            <summary>
            loop through all the blocks in xzy running a delegated method for each block, the delegated method will be bassed coordinated in xzy format
            </summary>
            <param name="FEBD">the delegate to call on each cycle</param>
        </member>
        <member name="M:MCForge.World.Level.ForEachBlock(MCForge.World.Level.ForEachBlockDelegate)">
            <summary>
            loop through all the blocks in xzy running a delegated method for each block, the delegated method will be passed coordinated in int format
            </summary>
            <param name="FEBD">the delegate to call on each cycle</param>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(MCForge.Core.Point3)">
            <summary>
            get the block (byte) at an xzy pos
            </summary>
            <param name="pos">the pos to check and return</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            get the block at a given xzy pos
            </summary>
            <param name="x">x pos to get</param>
            <param name="z">z pos to get</param>
            <param name="y">y pos to get</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            get the block at a given xzy position
            </summary>
            <param name="x">x pos to get</param>
            <param name="z">z pos to get</param>
            <param name="y">y pos to get</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.GetBlock(System.Int32)">
            <summary>
            Get the block at a given pos in the data array
            </summary>
            <param name="pos">the pos to get the block from</param>
            <returns>a byte that represents the blocktype at the given location</returns>
        </member>
        <member name="M:MCForge.World.Level.PosToInt(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Convert a pos (xzy) into a single INT pos
            </summary>
            <param name="x">X position to convert</param>
            <param name="z">Z position to convert</param>
            <param name="y">Y position to convert</param>
            <returns>an integer representing the given block position in the DATA array above.</returns>
        </member>
        <member name="M:MCForge.World.Level.IntToPos(System.Int32)">
            <summary>
            Convert an int POS to an xzy pos
            </summary>
            <param name="pos">The int pos to convert</param>
            <returns>a 3 dimensional representation of the block position</returns>
        </member>
        <member name="M:MCForge.World.Level.IntOffset(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the position (int) relative to a given block position (int) given an offset of xzy
            </summary>
            <param name="pos">the integral pos to start at</param>
            <param name="x">the offset along the x axis</param>
            <param name="z">the offset along the z axis</param>
            <param name="y">the offset along the y axis</param>
            <returns>returns an int representing the offset block location in the data array</returns>
        </member>
        <member name="P:MCForge.World.Level.TotalBlocks">
            <summary>
            Get the total blocks in the level
            </summary>
        </member>
        <member name="T:MCForge.World.Level.ForEachBlockDelegateXZY">
            <summary>
            This delegate is used for looping through the blocks in a level in an automated fashion, and each cycle returns the position in xzy format
            </summary>
            <param name="x">the loops current block location (x)</param>
            <param name="z">the loops current block location (z)</param>
            <param name="y">the loops current block location (y)</param>
        </member>
        <member name="T:MCForge.World.Level.ForEachBlockDelegate">
            <summary>
            This delegate is used for looping through the blocks in a level in an automated fashion, and each cycle returns the position in POS format
            </summary>
            <param name="pos">the loops current block position (pos)</param>
        </member>
        <member name="T:MCForge.World.Level.LevelTypes">
            <summary>
            An enumeration of all the types of levels
            </summary>
        </member>
        <member name="T:MCForge.API.Priority">
            <summary>
            The priority of the call
            Low will be called first so it can make the first changes
            High will be called last so it gets the last say
            </summary>
        </member>
        <member name="M:MCForge.Core.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:MCForge.Entity.Player">
            <summary>
            The player class, this contains all player information.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.USERNAME">
            <summary>
            The player's real username
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.lastcmd">
            <summary>
            Last command the player used.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.voted">
            <summary>
            Has the player voted?
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.beingkicked">
            <summary>
            Is the player being kicked ?
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.readrules">
            <summary>
            Has the player read the rules?
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.muted">
            <summary>
            Is the player muted
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.voiced">
            <summary>
            Does the player have voice status
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.jokered">
            <summary>
            Derermines if the player is jokered
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.voicestring">
            <summary>
            Appears in front of player's name if he is voiced
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player._username">
            <summary>
            Used for player's LOWERCASE username.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.ip">
            <summary>
            This is the player's IP Address
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.storedMessage">
            <summary>
            The player's stored message (For appending)
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.pingTimer">
            <summary>
            This sends the ping packet to the player. This is how we know when a player disconnects.
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isLoading">
            <summary>
            True if the player is currently loading a map
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isOnline">
            <summary>
            True if the player is Online (false if the player has disconnected)
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isLoggedIn">
            <summary>
            True if the player has completed the login process
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.staticCommands">
            <summary>
            True if player is using static commands
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isFlying">
            <summary>
            True is the player is flying
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.level">
            <summary>
            This players current level
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.id">
            <summary>
            The players MC Id, this changes each time the player logs in
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.Pos">
            <summary>
            The players current position
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.oldPos">
            <summary>
            The players last known position
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.Rot">
            <summary>
            The players current rotation
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.oldRot">
            <summary>
            The players last known rotation
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.lastClick">
            <summary>
            The players last known click
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.color">
            <summary>
            The players COLOR
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isHidden">
            <summary>
            True if this player is hidden
            </summary>
        </member>
        <member name="F:MCForge.Entity.Player.isAdmin">
            <summary>
            True if this player is an admin
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.SendBlockChange(System.UInt16,System.UInt16,System.UInt16,System.Byte)">
            <summary>
            This send a blockchange to the player only. (Not other players)
            </summary>
            <param name="x"></param> The position the block will be placed in (x)
            <param name="z"></param> The position the block will be placed in (z)
            <param name="y"></param> The position the block will be placed in (y)
            <param name="type"></param> The type of block that will be placed.
        </member>
        <member name="M:MCForge.Entity.Player.SendMessage(System.String)">
            <summary>
            Send this player a message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SendThisPlayerTheirOwnPos">
            <summary>
            Exactly what the function name is, it might be useful to change this players pos first ;)
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.Kick(System.String)">
            <summary>
            Kick this player with the specified message, the message broadcasts across the server
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SKick(System.String)">
            <summary>
            Kick this player with a specified message, this message will only get sent to op's
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MCForge.Entity.Player.SendToPos(MCForge.Core.Point3,System.Byte[])">
            <summary>
            Sends the specified player to the specified coordinates.
            </summary>
            <param name="_pos"></param>Point3 coordinate to send to.
            <param name="_rot"></param>Rot to send to.
        </member>
        <member name="M:MCForge.Entity.Player.GlobalDie">
            <summary>
            Kill this player for everyone.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.UniversalChat(System.String)">
            <summary>
            Send a message to everyone, on every world
            </summary>
            <param name="text">The message to send.</param>
        </member>
        <member name="M:MCForge.Entity.Player.CatchNextBlockchange(MCForge.Entity.Player.BlockChangeDelegate,System.Object)">
            <summary>
            This void catches the new blockchange a player does.
            </summary>
            <param name="change">The BlockChangeDelegate that will be executed on blockchange.</param>
            <param name="data">A passback object that can be used for a command to send data back to itself for use</param>        
        </member>
        <member name="M:MCForge.Entity.Player.Click(System.UInt16,System.UInt16,System.UInt16,System.Byte)">
            <summary>
            Fakes a click by invoking a blockchange event.
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <param name="y"></param>
            <param name="type"></param>
        </member>
        <member name="M:MCForge.Entity.Player.SpawnThisPlayerToOtherPlayers">
            <summary>
            Spawns this player to all other players in the server.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.SpawnOtherPlayersForThisPlayer">
            <summary>
            Spawns all other players of the server to this player.
            </summary>
        </member>
        <member name="M:MCForge.Entity.Player.ValidName(System.String)">
            <summary>
            Check to see is a given name is valid
            </summary>
            <param name="name">the name to check</param>
            <returns>returns true if name is valid</returns>
        </member>
        <member name="M:MCForge.Entity.Player.Find(System.String)">
            <summary>
            Attempts to find the player in the list of online players
            </summary>
            <param name="name">The player name to find</param>
            <remarks>Can be a partial name</remarks>
        </member>
        <member name="P:MCForge.Entity.Player.username">
            <summary>
            This is the player's LOWERCASE username, use this for comparison instead of calling USERNAME.ToLower()
            </summary>       
        </member>
        <member name="T:MCForge.Entity.Player.BlockChangeDelegate">
            <summary>
            This delegate is used for when a command wants to be activated the first time a player places a block
            </summary>
            <param name="p">This is a player object</param>
            <param name="x">The position of the block that was changed (x)</param>
            <param name="z">The position of the block that was changed (z)</param>
            <param name="y">The position of the block that was changed (y)</param>
            <param name="newType">The type of block the user places (air if user is deleting)</param>
            <param name="placing">True if the player is placing a block</param>
            <param name="PassBack">A passback object that can be used for a command to send data back to itself for use</param>
        </member>
        <member name="T:MCForge.Entity.Player.NextChatDelegate">
            <summary>
            This delegate is used for when a command wants to be activated the next time the player sends a message.
            </summary>
            <param name="p">The player object</param>
            <param name="message">The string the player sent</param>
            <param name="PassBack">A passback object that can be used for a command to send data back to itself for use</param>
        </member>
        <member name="T:MCForge.World.Blocks">
            <summary>
            A class that contains blocks / custom blocks and methods to work with them.
            </summary>
        </member>
        <member name="M:MCForge.World.Blocks.NameToByte(System.String)">
            <summary>
            This function takes in a block name and gives out its byte.
            </summary>
            <param name="name"></param> Name of the block.
            <returns></returns>
        </member>
        <member name="M:MCForge.World.Blocks.ByteToName(System.Byte)">
            <summary>
            This functions takes in a block byte and returns its name as a string.
            </summary>
            <param name="type"></param>Byte of the block
            <returns></returns>
        </member>
        <member name="F:MCForge.World.Blocks.CustomBlocks">
            <summary>
            A DYNAMIC dictionary of all the CustomBlocks in the server.
            </summary>
        </member>
        <member name="T:MCForge.World.Blocks.Types">
            <summary>
            An enumeration of all the default Minecraft blocks
            </summary>
        </member>
        <member name="T:MCForge.API.PlayerEvent.OnPlayerConnect">
            <summary>
            The OnPlayerConnect event is executed everytime a player connects to the server
            This event can be canceled
            </summary>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerConnect.#ctor(MCForge.Entity.Player)">
            <summary>
            Create a new Event to call
            </summary>
            <param name="p">The player connected to the event</param>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerConnect.Cancel(System.Boolean)">
            <summary>
            Cancel the event
            </summary>
            <param name="value">True will cancel the event, false will un-cancel the event</param>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerConnect.GetPlayer">
            <summary>
            Get the player connected to the event
            </summary>
            <returns>The player</returns>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerConnect.Call">
            <summary>
            Call the event
            </summary>
        </member>
        <member name="M:MCForge.API.PlayerEvent.OnPlayerConnect.Register(MCForge.API.PlayerEvent.OnPlayerConnect.OnCall,MCForge.API.Priority)">
            <summary>
            Register this event
            </summary>
            <param name="method">The method to call when this event gets excuted</param>
            <param name="priority">The importance of the call</param>
        </member>
        <member name="P:MCForge.API.PlayerEvent.OnPlayerConnect.IsCanceled">
            <summary>
            Is the event canceled
            </summary>
        </member>
    </members>
</doc>
